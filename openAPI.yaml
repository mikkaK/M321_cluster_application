openapi: 3.0.3
info:
  title: Task Management API
  description: API for user management, task management, category management, and user statistics.
  version: 1.0.0
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - email
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid request
  /users/{userId}:
    put:
      summary: Update user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User updated successfully
        400:
          description: Invalid request
        404:
          description: User not found
    delete:
      summary: Delete user account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: Login successful
        401:
          description: Unauthorized
  /tasks:
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                categoryId:
                  type: string
              required:
                - title
                - categoryId
      responses:
        201:
          description: Task created successfully
        400:
          description: Invalid request
    get:
      summary: Get all tasks for the logged-in user
      responses:
        200:
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{taskId}:
    put:
      summary: Update a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                categoryId:
                  type: string
      responses:
        200:
          description: Task updated successfully
        404:
          description: Task not found
    delete:
      summary: Delete a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Task deleted successfully
        404:
          description: Task not found
  /tasks/{taskId}/categories/{categoryId}:
    post:
      summary: Assign a task to a category
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Task assigned to category
        404:
          description: Task or category not found
    delete:
      summary: Remove a task from a category
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Task removed from category
        404:
          description: Task or category not found
  /categories:
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        201:
          description: Category created successfully
        400:
          description: Invalid request
    get:
      summary: Get all categories for the logged-in user
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{categoryId}:
    put:
      summary: Update a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Category updated successfully
        404:
          description: Category not found
    delete:
      summary: Delete a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted successfully
        404:
          description: Category not found
  /statistics:
    get:
      summary: Get user statistics
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
      responses:
        200:
          description: User statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  completedTasks:
                    type: integer
                  pendingTasks:
                    type: integer
                  inProgressTasks:
                    type: integer
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        categoryId:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string