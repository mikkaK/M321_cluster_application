plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ch.tbz'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "org.flywaydb:flyway-core:9.6.0"
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: 'latest.release'
	annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: 'latest.release'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def readEnvironmentFileIfExists(String envFilename) {
	def envVars = [:]
	def envFile = file(envFilename)
	if (envFile.exists()) {
		envFile.readLines().each {
			if (it != "" && it.charAt(0) != (char) '#') {
				def (key, value) = it.tokenize("=")
				key = key.toString()
				value = value.toString()
				if (System.getenv(key) == null) {
					envVars[key] = value
				}
			}
		}
	}

	return envVars
}

tasks.withType(JavaExec) { javaExec ->
	doFirst {
		def envVars = readEnvironmentFileIfExists(".env")
		for (envVar in envVars) {
			environment(envVar.key, envVar.value)
		}
	}
}